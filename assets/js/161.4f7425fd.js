(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{596:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("上一讲我们介绍了Go语言中的容器，即数组、切片和集合变量，并掌握了它们各自的声明和赋值技巧。我们都知道，为某个变量赋值，最终是为了使用它。那么，这一节我们会继续深入，介绍如下内容：")]),t._v(" "),s("ol",[s("li",[t._v("获取数组、切片和集合的元素个数")]),t._v(" "),s("li",[t._v("获取和修改数组、切片和集合的元素的值")]),t._v(" "),s("li",[t._v("数组、切片和集合的循环遍历")])]),t._v(" "),s("h2",{attrs:{id:"获取元素个数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取元素个数"}},[t._v("#")]),t._v(" 获取元素个数")]),t._v(" "),s("p",[t._v("相信朋友们还记得那个查找素数的例子，在上一讲中我们实现了查找范围是10以内的素数。现在要求变了，需要查找1000以内素数的个数。")]),t._v(" "),s("p",[t._v("为了方便阅读，我把上一讲中的代码示例搬了过来：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" resultSlice "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//假定i为素数")]),t._v("\n      flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当i能被某个整数整除时，不是素数")]),t._v("\n            flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果依旧为true，则i为素数")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" flag "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将素数存放到resultArray数组中")]),t._v("\n         resultSlice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resultSlice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resultSlice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("本例使用了切片而非数组或集合，为什么这样做呢？")]),t._v(" "),s("p",[t._v("因为我们不清楚容器内到底有多少个元素，因此数组不合适。查找到的结果是若干正整数，无需“键-值对”这样的数据结构，因此集合也不合适。")]),t._v(" "),s("p",[t._v("若要改变查找范围为1000以内，只需要修改最外层for循环的终止条件：将i < 10改为i < 1000即可。但运行后发现，输出实在是太多了。10以内的素数仅有4个，看一眼便可得出结论。但1000以内的话，简直无法数得清。")]),t._v(" "),s("p",[t._v("幸好Go语言内置了获取容器内元素个数的函数，这个函数"),s("strong",[t._v("对数组、切片和集合都有效，且用法相同")]),t._v("，调用格式为：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("variable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("其中，len()表示调用函数，是固定写法；variable被称为“参数”，表示向函数中“传递”的变量；调用后，函数将返回元素个数，返回值的类型是int。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("💡 提示： 有关函数的更多内容，将在下一讲中详述，这里仅需做到了解、会用即可。\n")])])]),s("p",[t._v("对于本例而言，获取素数个数只需编写如下代码即可实现：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resultSlice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("下面，将这句代码添加到原有代码中，再次运行程序即可看到控制台上输出元素个数了。")]),t._v(" "),s("p",[t._v("在实际工作中，对于函数的调用是很常见的做法。通过本例能体会到，作为函数的调用者，"),s("strong",[t._v("无需关注函数内部")]),t._v("是如何实现的（如本例中统计容器内元素个数的具体实现）。这一机制极大降低了重复功能的代码量，还能在一定程度上降低Bug的数量。")]),t._v(" "),s("p",[t._v("但劣势也很明显，当我们不清楚函数在做什么时，就没有信心调用它了。此时，可以通过"),s("strong",[t._v("函数名")]),t._v("（如本例的len()函数，对应英文单词的length，表示容器的长度，也就是容器内元素的个数）、阅读"),s("strong",[t._v("函数注释")]),t._v("等方法来了解（回忆一下曾经讲过的“"),s("strong",[t._v("代码规范")]),t._v("”，在"),s("a",{attrs:{href:"https://juejin.cn/book/7039174186522116131/section/7047596606715068430",target:"_blank",rel:"noopener noreferrer"}},[t._v("第5讲 附录二"),s("OutboundLink")],1),t._v("）。")]),t._v(" "),s("p",[t._v("此外，对于陌生的函数，还可以在已知结果的前提下进行初步验证。对于本例而言，就可以先保持“查找10以内的素数”这一条件不变。然后调用len()函数获取resultSlice切片变量的元素个数，看看是不是4。如此，便可初步验证len()函数的作用和正确性了。")]),t._v(" "),s("p",[t._v("当然，这样的验证做得越多，结果越可信。这种“验证”的思路还可用于代码测试，鉴于小册的内容结构，这部分暂不展开详述，在后续的章节中再做介绍。")]),t._v(" "),s("h2",{attrs:{id:"获取-修改元素的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取-修改元素的值"}},[t._v("#")]),t._v(" 获取/修改元素的值")]),t._v(" "),s("p",[t._v("有些时候，我们还需要获取和/或修改某个特定元素的值。我们还是用查找素数作为例子，这次的要求是逐个输出10以内整数是否为素数。结果如下：")]),t._v(" "),s("blockquote",[s("p",[t._v("0 false\n1 false\n2 true\n3 true\n4 false\n5 true\n6 false\n7 true\n8 false\n9 false\n10 false")])]),t._v(" "),s("p",[t._v("可以看到，第3、4、6、8个元素（索引值为2、3、5、7）的值为true，它们都是素数，其它元素值为false，不是素数。请大家想想看，如何实现呢？")]),t._v(" "),s("p",[t._v("为了讲解元素值的修改方法，在此给各位提供一个实现思路，一共分为三个步骤：")]),t._v(" "),s("ol",[s("li",[t._v("声明元素个数为11，值类型为bool的数组。并附所有元素初值为false，假定所有元素皆非素数；")]),t._v(" "),s("li",[t._v("判断2-10范围内的素数，若是素数，将数组相应索引表示的值改为true；")]),t._v(" "),s("li",[t._v("输出数组元素的索引和索引表示的值。")])]),t._v(" "),s("p",[t._v("接下来实现上面三个步骤。")]),t._v(" "),s("p",[t._v("声明并赋初值是上一讲的内容，使用for循环实现：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明元素类型为bool的数组。索引表示正整数；值表示是否为素数，true为是。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" resultArray "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋初值，皆为false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   resultArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("接着，修改查找素数的逻辑如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 素数判定")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//假定i为素数")]),t._v("\n   flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当i能被某个整数整除时，不是素数")]),t._v("\n         flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果依旧为true，则i为素数")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" flag "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      resultArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("由于0和1不是素数，因此无需理会，循环依旧从2开始。当查找到素数时，将resultArray数组中相应索引所表示的值改为true。如：2是素数，resultArray[2]的值将被改为true。")]),t._v(" "),s("p",[t._v("最后，使用循环依次输出resultArray的索引和索引表示的值：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resultArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("将上述三个步骤依次结合起来，并运行程序，最终将得到所要求的输出结果。")]),t._v(" "),s("p",[t._v("在实现的过程中不难发现，访问数组中元素时，代码为：resultArray[i]；修改数组中元素的值实际和赋值相同。")]),t._v(" "),s("p",[t._v("由此我们归纳出如下规律：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("修改数组、切片和集合中的值，方法与赋值相同")]),t._v("；")]),t._v(" "),s("li",[s("strong",[t._v("获取数组或切片的值，格式为variable[index]")]),t._v("。variable表示数组或切片的变量名；index表示索引值。")]),t._v(" "),s("li",[s("strong",[t._v("获取集合的值，格式为variable[key_value]")]),t._v("。variable表示集合的变量名；key_value表示键的值。")])]),t._v(" "),s("h2",{attrs:{id:"循环遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环遍历"}},[t._v("#")]),t._v(" 循环遍历")]),t._v(" "),s("p",[t._v("在上一个例子中，我们使用了for循环实现了resultArray数组的赋值和输出。")]),t._v(" "),s("p",[t._v("对于数组和切片而言，使用for循环是实现遍历的途径之一，但往往无法适用于集合。")]),t._v(" "),s("p",[t._v("对于数组和切片而言，索引是从0开始的整数，可以使用索引作为循环条件。但集合的的取值方式是通过“键”，而键的值就不一定是数字了。非数字的键，往往会是字符串。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("❗️ 注意： 数组和切片是有序存储的，因此可用索引来循环；集合是无序的，在使用时要格外小心。\n")])])]),s("p",[t._v("我们还是回顾上一讲中使用过的集合示例：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" studentInfos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   studentInfos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0001"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"王小红"')]),t._v("\n   studentInfos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0002"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"李小明"')]),t._v("\n   studentInfos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0003"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三丰"')]),t._v("\n   studentInfos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0004"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"孙小贝"')]),t._v("\n   studentInfos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0005"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"何明明"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出语句")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("studentInfos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("运行后，控制台会一口气依次输出所有studentInfos集合的键值对，如下所示：")]),t._v(" "),s("blockquote",[s("p",[t._v("map[0001:王小红 0002:李小明 0003:张三丰 0004:孙小贝 0005:何明明]")])]),t._v(" "),s("p",[t._v("现在，需要输出更易于使用者理解的格式，具体如下：")]),t._v(" "),s("blockquote",[s("p",[t._v("学号： 0004 姓名： 孙小贝\n学号： 0005 姓名： 何明明\n学号： 0001 姓名： 王小红\n学号： 0002 姓名： 李小明\n学号： 0003 姓名： 张三丰")])]),t._v(" "),s("p",[t._v("显然，需要逐个获取集合中的键值对了。")]),t._v(" "),s("p",[t._v("除了for循环外，Go语言还提供了range关键字。与for结合，也可以实现循环遍历，其使用格式如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" variable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("其中，index表示索引或键的值；value表示元素的值；variable表示数组、切片或集合变量；由大括号包裹的部分是循环体，可以使用index和value变量。")]),t._v(" "),s("p",[t._v("对于本例，可以如下实现：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v("\n复制代码"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" studentInfos "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"学号："')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"姓名："')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("再次运行，即可得到所要求的输出结果了。")]),t._v(" "),s("p",[t._v("这种for与range结合实现循环遍历的结构，也被称为"),s("strong",[t._v("for-range结构")]),t._v("。这种结构同样适用于数组和切片。")]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("🎉 恭喜，您完成了本次课程的学习！")]),t._v(" "),s("p",[t._v("📌 以下是本次课程的重点内容总结：")]),t._v(" "),s("ol",[s("li",[t._v("获取数组、切片和集合的元素个数")]),t._v(" "),s("li",[t._v("获取和修改数组、切片和集合的元素的值")]),t._v(" "),s("li",[t._v("数组、切片和集合的循环遍历")])]),t._v(" "),s("p",[t._v("在实际使用数组、切片和集合时，往往是综合本讲和上一讲内容中的知识点一起使用的。")]),t._v(" "),s("p",[t._v("比如，在使用for循环遍历数组时，需要首先获取元素个数，然后将其作为循环结束的条件。否则，将会引发下表越界错误，导致程序出错。")]),t._v(" "),s("p",[t._v("再比如，使用for-range循环，再循环体内使用元素的值参与其它运算，抑或是根据元素值或集合中键的值进行元素筛选，等等。")]),t._v(" "),s("p",[t._v("➡️ 在下次课程中，我们会介绍如下内容：")]),t._v(" "),s("ul",[s("li",[t._v("Go语言中的“函数”，包括：\n"),s("ul",[s("li",[t._v("函数的定义")]),t._v(" "),s("li",[t._v("函数的调用")])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);