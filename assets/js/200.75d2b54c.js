(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{634:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("1、GitHub创建新的项目仓库")]),t._v(" "),s("p",[t._v("2、将项目clone下来（此时为main分支上，以前叫做master）")]),t._v(" "),s("p",[t._v("3、切换分支，git checkout -b my-feature")]),t._v(" "),s("p",[t._v("4、git diff 查看本地与git上代码的不同")]),t._v(" "),s("p",[t._v("5、git add . 添加到暂存区，git知道你将要提交什么")]),t._v(" "),s("p",[t._v("6、将my-feature分支修改的内容提交到GitHub的my-fetaure分支，")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git push origin my-feature\n")])])]),s("p",[t._v("github此时已经多出来一个my-feature分支")]),t._v(" "),s("p",[t._v("7、如果GitHub的main分支存在文件更新，此时，本地磁盘的main分支和GitHub上的main分支内容不一样")]),t._v(" "),s("p",[t._v("我们使用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git checkout main\n")])])]),s("p",[t._v("然后再运行")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git pull orgin master\n")])])]),s("p",[t._v("意思就是将远端的main同步到本地的main")]),t._v(" "),s("p",[t._v("8、返回my-feature分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git checkout my-feature\n")])])]),s("p",[t._v("将main代码同步到my-feature分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git rebase main\n")])])]),s("p",[t._v("意思是：将本地修改放到一边，将远程的main拉到my-fetaure分支")]),t._v(" "),s("p",[t._v("此时会出现，git conflict需要手动选择你需要的代码，")]),t._v(" "),s("p",[t._v("9、使用了rebase之后，必须加上-f，表示强行push")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git push -f origin my-feature\n")])])]),s("p",[t._v("1.git clone // 到本地\n2.git checkout -b xxx 切换至新分支xxx\n（相当于复制了remote的仓库到本地的xxx分支上\n3.修改或者添加本地代码（部署在硬盘的源文件上）\n4.git diff 查看自己对代码做出的改变\n5.git add 上传更新后的代码至暂存区\n6.git commit 可以将暂存区里更新后的代码更新到本地git\n7.git push origin xxx 将本地的xxxgit分支上传至github上的git\n-----------------------------------------------------------\n（如果在写自己的代码过程中发现远端GitHub上代码出现改变）\n1.git checkout main 切换回main分支\n2.git pull origin master(main) 将远端修改过的代码再更新到本地\n3.git checkout xxx 回到xxx分支\n4.git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容\n（中途可能会出现，rebase conflict -----》手动选择保留哪段代码）\n5.git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上\n（-f ---》强行）\n6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit")]),t._v(" "),s("p",[t._v("远端完成更新后\n1.git branch -d xxx 删除本地的git分支\n2.git pull origin master 再把远端的最新代码拉至本地")]),t._v(" "),s("h2",{attrs:{id:"tips"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" TIPS")]),t._v(" "),s("h4",{attrs:{id:"_1、拉取代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、拉取代码"}},[t._v("#")]),t._v(" 1、拉取代码")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n// 切换分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" feature-fix\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin feature-fix\n")])])]),s("h4",{attrs:{id:"_2、git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、git-stash"}},[t._v("#")]),t._v(" 2、git stash")]),t._v(" "),s("p",[t._v("场景：当你在你所在的分支写代码，线上出现紧急bug，你所在分支bug还没修改完成，不好提交代码，使用git stash")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先把代码储存在本地缓存 ss是stash save的简写")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"未改完的bug，等下再改"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" fix-hot\n")])])]),s("p",[t._v("stash更多操作")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂存当前正在进行的工作，比如想 pull 最新代码，又不想加新 commit，或者为了 fix 一个紧急的 bug，先 stash，使返回到自己上一个 commit，改完 bug 之后再 stash pop, 继续原来的工作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash save "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂存时加备注 方便查找")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash show "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 默认显示第一个改动 如果显示其他 git stash show "stash@{1}"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash show "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 改动的具体内容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 恢复第一个存储 恢复其他使用 git stash apply "stash@{1}"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stash@{2}"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除stash@{2}存储")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pop "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stash apply 和 stash drop 结合体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空stash")]),t._v("\n")])])]),s("p",[t._v("修改完紧急bug，提交代码")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-am")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fix:修复线上紧急bub'")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3、git-amend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、git-amend"}},[t._v("#")]),t._v(" 3、git amend")]),t._v(" "),s("p",[t._v("打错注释，如何修改一下呢？")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" amend "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fix:修复线上紧急bug"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),s("p",[t._v("amend直译:修正")]),t._v(" "),s("p",[t._v("只修正文件，不修正提交信息，如提交的时候发现有文件忘记提交，先添加到暂存区，在使用下面的命令进行修正，之后就可以看到提交中已经有了忘记提交的文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v(" --no-edit\n")])])]),s("p",[t._v("如果多提交了文件，也可以先通过"),s("code",[t._v("git rm --cached <文件名>")]),t._v("，再通过以上命令修正。")]),t._v(" "),s("p",[t._v("只修正提交信息，如提交时发现写的提交信息不太正确时，可通过以下命令修改")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat: xxx"')]),t._v("\n")])])]),s("p",[t._v("修改提交信息和文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v("\n")])])]),s("p",[t._v('你的 bug 已经修复完，并且代码已经推到远程分支上。但是部署完，找测试看了一下，发现这个 bug 是修复好了，但是又导致出现了另一个 bug，还好你给测试买了一杯奶茶，让她不要在大群里说。然后你立马修复，又得重新提交，可是这要是提交上去，前端老大 review 时看到你的提交记录，"改个bug怎么怎么还多了一个 💢"，这可怎么办？')]),t._v(" "),s("p",[t._v("4、reset")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("// 将HEAD指向前一次提交 即退回上一次提交到工作区\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD~1\n// 然后修改代码 重新添加到工作区提交\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-am")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fix:修改线上紧急bug'")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);