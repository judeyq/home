(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{591:function(t,a,s){"use strict";s.r(a);var r=s(2),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("我们日常玩的电脑游戏、手机上运行的各类软件、甚至是操作系统都是以数据的管理和计算为基础的，那么这些数据是如何在计算机中安家的呢？这就涉及到了编程语言中的基本语法内容了，这节课我们一起来看一下Go语言的基础语法。具体包括以下内容：")]),t._v(" "),a("ul",[a("li",[t._v("变量与常量")]),t._v(" "),a("li",[t._v("声明与赋值")]),t._v(" "),a("li",[t._v("基本数据类型")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("💡 提示： 为易于大家领会要点，节约篇幅，在文末有3个附录。大家可结合相应的知识点进行查阅和实践。\n")])])]),a("h2",{attrs:{id:"变量与常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量与常量"}},[t._v("#")]),t._v(" 变量与常量")]),t._v(" "),a("p",[t._v("与大多数编程语言类似，Go语言支持声明变量与常量，Go语言程序在运行时，会把所需的数据加载到内存中，这些数据又分为常量和变量，它们的定义也很好理解：")]),t._v(" "),a("ul",[a("li",[t._v("常量是一个简单值的标识符，在程序运行时，不会被修改的量；")]),t._v(" "),a("li",[t._v("变量来源于数学，是计算机语言中能储存计算结果或能表示值的抽象概念，它的值通常是可变的。")])]),t._v(" "),a("p",[t._v("为何要将数据分为可变的变量和不可变的常量？答案是：为了程序"),a("strong",[t._v("更快")]),t._v("、"),a("strong",[t._v("更安全")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("更快：虽然常量和变量都会占用内存，但它们位于不同的位置，常量会在编译后放在数据段内存；变量放在代码段内存。合理地使用常量将加快编译速度与减少运行时的内存占用。")]),t._v(" "),a("li",[t._v("更安全：由于常量不可变，因此我们就没有机会将其误改为其它的值。")])]),t._v(" "),a("p",[t._v("变量与常量本身很好理解，这里就不过多解释了，需要注意的是它们的命名。")]),t._v(" "),a("p",[t._v("无论是常量还是变量，我们都可以通过它们的名字访问它们。"),a("strong",[t._v("Go语言中包含25个关键字和37个保留字（参考附录一），在起名字的时候要注意避开它们。")])]),t._v(" "),a("p",[t._v("如果错误地使用了关键字或者保留字作为名字，编译器便无法区分到底该作为名字处理，还是当作本身的作用处理，因此会引发编译时错误。使用GoLand会帮助我们规避这类问题，例如下面的代码：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"打断"')]),t._v("\n")])])]),a("p",[t._v("由于break本身属于流程控制类的关键字，代码无法被编译。")]),t._v(" "),a("p",[t._v("在实际开发中，不同的开发者起名字的习惯不同，往往会导致代码的可读性降低甚至引起歧义。比如，把变量命名为a1、a2、a3……时间久了之后几乎没有人能一下子看懂它们代表什么含义，包括代码的作者。因此，一个好的习惯是尽量使用能表达其含义的一个或多个英文单词来命名。")]),t._v(" "),a("ul",[a("li",[t._v("对于变量，除了首个单词外，每个单词的首字母用大写表示，这种命名法通常被称为小驼峰式命名法；若所有单词的首字母均大写，则成为大驼峰式命名法（又被称为帕斯卡命名法）。由于变量有可见性（有关可见性的更多内容，将在结构体/包中介绍。）之分，对于对外可见的变量，使用大驼峰法；对于对外不可见的变量，使用小驼峰法。特别地，若变量/常量是布尔类型，最好以is、allow、has、can之类来开头；")]),t._v(" "),a("li",[t._v("对于常量，单词均用大写字母来表示，每个字母之间使用下划线来分割。")])]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" exampleNumberA "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" isDarkMode "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" WIDTH_OF_RECT "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ALLOW_DOWNLOAD_WHEN_WIFI "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n💡 提示： 本小册中的所有示例代码均按照上述规则对变量"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("常量命名。\n❗️ 注意： Go语言是区分大小写的，exampleNumberA和ExampleNumberA是两个不同的变量。\n")])])]),a("p",[t._v("Go语言中的命名规范除了体现在变量/常量的命名上，还体现在包名、源码文件名等多个方面，具体请参考文末附录二。")]),t._v(" "),a("h2",{attrs:{id:"声明与赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明与赋值"}},[t._v("#")]),t._v(" 声明与赋值")]),t._v(" "),a("p",[t._v("从定义上看，声明是指：")]),t._v(" "),a("blockquote",[a("p",[t._v("当一个计算机程序需要调用内存空间时，对内存发出的“占位”指令，称为：“声明”。")])]),t._v(" "),a("p",[t._v("通俗地讲，我们使用的软件都是从硬盘加载到内存，然后在内存中运行的，因为内存和CPU之间交换数据的速度更快。除了程序运行的逻辑外，必要的数据必然也会被加载到内存中。而声明的目的就是在计算机的内存中占用一定大小的空间，用来存放数据。")]),t._v(" "),a("p",[a("strong",[t._v("在Go语言中，变量或常量的数据类型必须先声明，才能使用")]),t._v("，且无法将不相关的数据赋值给它们。")]),t._v(" "),a("p",[t._v("这是因为Go语言和Java、C、C++等语言一样，属于静态语言，静态语言具有更严谨的结构要求、调试便捷（可通过代码直观地看到数据类型）与确保类型安全（无法使用不同类型的数据赋值）的特点，必须要先做声明。而像PHP、Python、JavaScript等动态语言则没有这个限制。")]),t._v(" "),a("p",[t._v("从根本上说，静态类型和动态类型语言的最大区别就是，"),a("strong",[t._v("数据类型是否在编译时确定。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("💡 提示： 如果想要计算机运行人类编写的Go语言代码，需要先编译再运行。程序代码易于人类编写和理解，但计算机无法直接理解，需要先“翻译”为机器语言才行，编译便是完成这个“翻译”工作的。与此相对，运行便是将机器语言加载到内存中执行的过程。\n")])])]),a("h3",{attrs:{id:"变量的声明与赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的声明与赋值"}},[t._v("#")]),t._v(" 变量的声明与赋值")]),t._v(" "),a("p",[t._v("在Go语言中，声明变量的一般格式为：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n")])])]),a("p",[t._v("其中，var是声明变量的关键字，固定不变，表明意图——要声明一个变量；name紧随其后，是开发者自定义的变量名，可根据实际用途和命名规范命名；type表示该变量所属的数据类型。")]),t._v(" "),a("p",[t._v("完成声明后，便要对变量进行赋值了，否则它没有任何意义。赋值后，变量就有了“初始值”；对于已经有值的变量，再次赋值将使用新值覆盖旧值，达到修改的目的。")]),t._v(" "),a("p",[t._v("和大多数编程语言一样，使用等号“=”为变量或常量赋值。如：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明一个名为number的变量，类型为int（整数类型）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为number赋值")]),t._v("\nnumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n")])])]),a("p",[t._v("如此，number这个变量就表示100这个整数了。此外，变量的声明和赋值还可一并完成，如：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n")])])]),a("p",[t._v("这种写法与前一个示例作用相同。")]),t._v(" "),a("h3",{attrs:{id:"常量的声明与赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量的声明与赋值"}},[t._v("#")]),t._v(" 常量的声明与赋值")]),t._v(" "),a("p",[t._v("常量声明和赋值的一般格式为：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n")])])]),a("p",[t._v("其中，const是声明常量的关键字，固定不变，表明意图，要声明一个常量；name和type的意义与声明变量时一样；value是常量的值。如：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明一个名为PI的常量，类型为float64（浮点数类型）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PI "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),t._v("\n❗️ 注意： 声明常量时，必须为其赋值，且后续无法修改。\n")])])]),a("h3",{attrs:{id:"go语言的类型推断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go语言的类型推断"}},[t._v("#")]),t._v(" Go语言的类型推断")]),t._v(" "),a("p",[t._v("使用Go语言可简化代码，类型推断体现了这一点。当声明与赋值一并进行时，如果数据为Go内置的基础类型，则可无需指定类型。如：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),t._v("\n")])])]),a("p",[t._v("无需担心，由于number的值为100，Go语言会推断出它的类型为整数型。同理，PI也会被推断为浮点数型。")]),t._v(" "),a("p",[t._v("对于变量，还有一种超级精简的声明和赋值方式，示例如下：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量声明")]),t._v("\nnumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n❗️ 注意： 冒号等于号“"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("”的作用是声明和赋值，若number是已经声明过的变量，则无法使用 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" 的方式赋值。\n")])])]),a("h3",{attrs:{id:"批量声明-赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#批量声明-赋值"}},[t._v("#")]),t._v(" 批量声明/赋值")]),t._v(" "),a("p",[t._v("为了方便多个变量/常量的声明和赋值，我们还可以批量处理它们，示例如下：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明+赋值")]),t._v("\n        number "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明+赋值（类型推断）")]),t._v("\n        text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//只声明")]),t._v("\n        name "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PI 声明+赋值")]),t._v("\n        PI "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// WIDTH 声明+赋值（类型推断）")]),t._v("\n        WIDTH  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HEIGHT 声明+赋值（类型推断）")]),t._v("\n        HEIGHT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("到此，一些朋友可能会问：什么是常量/变量？为什么常量的值可以修改而变量不行？为何声明常量都用大写字符？除了示例中的int、float64、string，还有哪些内置类型……")]),t._v(" "),a("p",[t._v("带着这些疑问，我们继续往下看。")]),t._v(" "),a("h2",{attrs:{id:"基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),a("p",[t._v("和其它高级编程语言类似，Go语言同样内置了多种基本数据类型，它们也被称为内置数据类型。")]),t._v(" "),a("p",[t._v("除了基本数据类型之外，还有接口类型（下一讲中会介绍）和复合类型（可以简单地理解为基本数据的“组合体”，如数组、切片、结构体等）。")]),t._v(" "),a("p",[t._v("由此可见，掌握基本数据类型是实现复杂运算乃至构建复杂程序的基础，也是日常开发中使用最频繁的类型。")]),t._v(" "),a("p",[t._v("Go语言的基本数据类型包括数字型（含整数int系列、浮点数float系列和复数complex系列）、布尔型（bool）和字符串型(string)。对于数字型和布尔型较为易懂，在本讲前面的内容中已经使用过了，这里要特别强调字符串型。")]),t._v(" "),a("p",[t._v("对于字符串型值，我们通常在必要时使用一些转义字符，以实现文本的正确输出。")]),t._v(" "),a("p",[t._v("举例来说，如果我们想要使用单个变量表示下面的两行字：")]),t._v(" "),a("blockquote",[a("p",[t._v('汉语:"你好"的英文翻译是:"Hello" 汉语:"早上好"的英文翻译是:"Good Morning"')])]),t._v(" "),a("p",[t._v("代码可写为：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"汉语:\\"你好\\"的英文翻译是:\\"Hello\\"\\n汉语:\\"早上好\\"的英文翻译是:\\"Good Morning\\""')]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v('这段代码中，使用了"输出英文双引号，\\n用作换行。当然，若使用中文的双引号时无需使用转义的。更多转义字符及含义请参考附录四。')]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("🎉 恭喜，您完成了本次课程的学习！")]),t._v(" "),a("p",[t._v("📌 以下是本次课程的重点内容总结：")]),t._v(" "),a("ol",[a("li",[t._v("变量与常量")]),t._v(" "),a("li",[t._v("声明")]),t._v(" "),a("li",[t._v("基本数据类型")]),t._v(" "),a("li",[t._v("代码风格约定")])]),t._v(" "),a("p",[t._v("我们使用的几乎所有软件的背后，其实都是数据，数据是构成程序的基础单位。Go语言将数据分为了常量与变量，分别表示不变的数据和可变的数据。程序运行后，数据被放到计算机内存中管理并参与运算。声明在内存中开辟空间，让数据在内存中“安家”。")]),t._v(" "),a("p",[t._v("为了增强代码的可读性和安全性，Go语言本身是静态语言，数据的类型在声明时便要指定。Go语言中的基本数据类型分为数值型、布尔型和字符串型。")]),t._v(" "),a("p",[t._v("为了便于理解和规范代码，为变量命名时，遵循“驼峰式命名法”，再根据可见性使用小驼峰和大驼峰式；为常量命名时，遵循全大写，单词之间使用下划线分割的方式命名。另外，源码文件名、包名等也有规范命名要求。")]),t._v(" "),a("p",[t._v("学习这一讲时，我特别建议大家动手实践，尤其对于编程0基础的同学来说，练习更为重要，切勿停留在理解层面。如果有问题的话，欢迎各位随时在微信群里发问。")]),t._v(" "),a("p",[t._v("➡️ 在下次课程中，我们会阐述如下内容：")]),t._v(" "),a("ul",[a("li",[t._v("Go语言基础语法之流程控制结构，包括：\n"),a("ul",[a("li",[t._v("指针类型")]),t._v(" "),a("li",[t._v("运算符及优先级")]),t._v(" "),a("li",[t._v("类型转换")])])])]),t._v(" "),a("h2",{attrs:{id:"附录一-go语言中的关键字和保留字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录一-go语言中的关键字和保留字"}},[t._v("#")]),t._v(" 附录一 Go语言中的关键字和保留字")]),t._v(" "),a("p",[a("strong",[t._v("Go语言中的关键字")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("包管理")]),t._v(" "),a("th",[t._v("声明与定义")]),t._v(" "),a("th",[t._v("流程控制")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("import、package")]),t._v(" "),a("td",[t._v("chan、const、func、interface、map、struct、type、var")]),t._v(" "),a("td",[t._v("break、case、continue、default、defer、else、fallthrough、for、go、goto、if、range、return、select")])])])]),t._v(" "),a("p",[a("strong",[t._v("Go语言中的保留字")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("常量")]),t._v(" "),a("th",[t._v("变量类型")]),t._v(" "),a("th",[t._v("内置函数名")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("true、false、iota、nil")]),t._v(" "),a("td",[t._v("Int、int8、int16、int32、int64、uint、uint8、uint16、uint32、uint64、uintptr、float32、float64、complex128、complex64、bool、byte、rune、string、error")]),t._v(" "),a("td",[t._v("make、len、cap、new、append、copy、close、delete、complex、real、imag、panic、recover")])])])]),t._v(" "),a("h2",{attrs:{id:"附录二-go语言命名规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录二-go语言命名规范"}},[t._v("#")]),t._v(" 附录二 Go语言命名规范")]),t._v(" "),a("p",[t._v("Go语言中的命名规则应尽量使用能表达其含义或目的的一个或多个英文单词来命名。英文单词之间的连接方式和大小写规则如下：")]),t._v(" "),a("h3",{attrs:{id:"源码文件名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码文件名"}},[t._v("#")]),t._v(" 源码文件名")]),t._v(" "),a("p",[t._v("英文单词全部小写，每个单词之间使用下划线分割。")]),t._v(" "),a("p",[t._v("如：hello_world.go、calc.go")]),t._v(" "),a("h3",{attrs:{id:"包名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包名"}},[t._v("#")]),t._v(" 包名")]),t._v(" "),a("p",[t._v("使用尽量简短的英文单词，全部小写，名称不要与Go内置标准库相同。")]),t._v(" "),a("p",[t._v("如：net、database")]),t._v(" "),a("h3",{attrs:{id:"变量名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量名"}},[t._v("#")]),t._v(" 变量名")]),t._v(" "),a("p",[t._v("整体遵循驼峰式命名法。允许从外部访问的名字（类似Java中的public修饰符）以大写开头（大驼峰法，亦称帕斯卡命名法），不允许从外部访问的名字以小写开头（小驼峰法）。对于布尔类型的变量，可考虑添加Has、Is、Can、Allow前缀。")]),t._v(" "),a("p",[t._v("如：age、personStatus、StudentAge、isDarkMode")]),t._v(" "),a("h3",{attrs:{id:"常量名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量名"}},[t._v("#")]),t._v(" 常量名")]),t._v(" "),a("p",[t._v("英文单词全部大写，每个单词之间使用下划线分割。对于布尔类型的变量，可考虑添加Has、Is、Can、Allow前缀。")]),t._v(" "),a("p",[t._v("如：SERVER_URL、IS_ALLOW_DOWNLOAD")]),t._v(" "),a("h3",{attrs:{id:"结构体名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体名"}},[t._v("#")]),t._v(" 结构体名")]),t._v(" "),a("p",[t._v("整体遵循驼峰式命名法。允许从外部访问的名字（类似Java中的public修饰符）以大写开头（大驼峰法，亦称帕斯卡命名法），不允许从外部访问的名字以小写开头（小驼峰法）。")]),t._v(" "),a("p",[t._v('如：personInfo := {"David", "18"}')]),t._v(" "),a("p",[t._v("使用struct关键字进行声明和初始化时，使用多行表示，每行表示一个成员。")]),t._v(" "),a("p",[t._v("如：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" PersonInfo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   name "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n   age  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"接口名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口名"}},[t._v("#")]),t._v(" 接口名")]),t._v(" "),a("p",[t._v("整体遵循驼峰式命名法。允许从外部访问的名字（类似Java中的public修饰符）以大写开头（大驼峰法，亦称帕斯卡命名法），不允许从外部访问的名字以小写开头（小驼峰法），通常以“er”结尾。")]),t._v(" "),a("p",[t._v("如：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("Go\n复制代码"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" DownloadListener "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DownloadStart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DownloadInProgress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DownloadComplete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"附录三-go语言基本数据类型定义及精度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录三-go语言基本数据类型定义及精度"}},[t._v("#")]),t._v(" 附录三 Go语言基本数据类型定义及精度")]),t._v(" "),a("h3",{attrs:{id:"整数型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数型"}},[t._v("#")]),t._v(" 整数型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("精度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("uint8")]),t._v(" "),a("td",[t._v("无符号 8 位整型 (0 到 28-1)")])]),t._v(" "),a("tr",[a("td",[t._v("uint16")]),t._v(" "),a("td",[t._v("无符号 16 位整型 (0 到 216-1)")])]),t._v(" "),a("tr",[a("td",[t._v("uint32")]),t._v(" "),a("td",[t._v("无符号 32 位整型 (0 到 232-1)")])]),t._v(" "),a("tr",[a("td",[t._v("uint64")]),t._v(" "),a("td",[t._v("无符号 64 位整型 (0 到 264-1)")])]),t._v(" "),a("tr",[a("td",[t._v("int8")]),t._v(" "),a("td",[t._v("有符号 8 位整型 (-27 到 27-1)")])]),t._v(" "),a("tr",[a("td",[t._v("int16")]),t._v(" "),a("td",[t._v("有符号 16 位整型 (-215 到 215-1)")])]),t._v(" "),a("tr",[a("td",[t._v("int32")]),t._v(" "),a("td",[t._v("有符号 32 位整型 (-231 到 231)")])]),t._v(" "),a("tr",[a("td",[t._v("int64")]),t._v(" "),a("td",[t._v("有符号 64 位整型 (-264 到 264)")])])])]),t._v(" "),a("h3",{attrs:{id:"浮点型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[t._v("#")]),t._v(" 浮点型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("精度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("float32")]),t._v(" "),a("td",[t._v("±1.18×10-38 到 ±3.4×1038")])]),t._v(" "),a("tr",[a("td",[t._v("float64")]),t._v(" "),a("td",[t._v("±2.23×10-308 到 ±1.8×10308")])])])]),t._v(" "),a("h3",{attrs:{id:"复数型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复数型"}},[t._v("#")]),t._v(" 复数型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("精度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("complex64")]),t._v(" "),a("td",[t._v("含 float32 位实数和 float32 位虚数")])]),t._v(" "),a("tr",[a("td",[t._v("complex128")]),t._v(" "),a("td",[t._v("含 float64 位实数和 float64 位虚数")])])])]),t._v(" "),a("h3",{attrs:{id:"布尔型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔型"}},[t._v("#")]),t._v(" 布尔型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("精度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("bool")]),t._v(" "),a("td",[t._v("true 或 false")])])])]),t._v(" "),a("h3",{attrs:{id:"字符串型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串型"}},[t._v("#")]),t._v(" 字符串型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("精度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("UTF-8 编码标识的 Unicode 文本")])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);